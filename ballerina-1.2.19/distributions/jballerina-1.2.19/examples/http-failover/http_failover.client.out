# To invoke the Failover Service, use following curl command.
curl -v http://localhost:9090/fo
# The `FailoverClient` endpoint is configured with three target services.The first two targets are configured to mimic
# failure backends. If one target service goes down, the failover client automatically calls the other targets.
# Once you invoke the Failover demo service, the Failover client fails over the request to the configured
# target endpoints. In this example, the third target is configured to give a successful response and the following
# response is given when the failover demo service is invoked.
# Server response:
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 9090 (#0)
> GET /fo HTTP/1.1
> Host: localhost:9090
> User-Agent: curl/7.54.0
> Accept: */*
>
< HTTP/1.1 200 OK
< content-type: text/plain
< date: Wed, 4 Sep 2019 15:29:37 +0530
< server: ballerina/1.0.0-beta
< content-length: 25
<
* Connection #0 to host localhost left intact
Mock Resource is Invoked.
# Invoke the Failover Service again using the curl command.
curl -v http://localhost:9090/fo
# At this point, Ballerina failover client already knows that leading endpoints (in this case the first two targets)
# failed in the last invocation and it got the successful response from the third target. So the failover client
# resumes the failover from the last successful target. In this case it is the third target and the client will get
# the immediate response for subsequent calls.
# Server response:
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 9090 (#0)
> GET /fo HTTP/1.1
> Host: localhost:9090
> User-Agent: curl/7.54.0
> Accept: */*
>
< HTTP/1.1 200 OK
< content-type: text/plain
< date: Wed, 4 Sep 2019 15:29:41 +0530
< server: ballerina/1.0.0-beta
< content-length: 25
<
* Connection #0 to host localhost left intact
Mock Resource is Invoked.
